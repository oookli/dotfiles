set nocompatible
filetype off

let mapleader="\<Space>"

" # Plugins
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'dyng/ctrlsf.vim'
" Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'Shougo/vimproc.vim'
Plugin 'tpope/vim-rvm'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-repeat'
Plugin 'jiangmiao/auto-pairs'
Plugin 'docunext/closetag.vim'
" Plugin 'tpope/vim-unimpaired'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'chun-yang/vim-action-ag'
Plugin 'easymotion/vim-easymotion'
" Plugin 'valloric/youCompleteMe'
" Plugin 'altercation/vim-colors-solarized'
Plugin 'nanotech/jellybeans.vim'
Plugin 'rking/ag.vim'
" Plugin 'mileszs/ack.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'bling/vim-airline'
" Plugin 'bling/vim-bufferline'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-dispatch'
Plugin 'majutsushi/tagbar'
Plugin 'godlygeek/tabular'
Plugin 'mbbill/undotree'
Plugin 'kchmck/vim-coffee-script'
Plugin 'othree/html5.vim'
Plugin 'digitaltoad/vim-jade'
" Plugin 'tmatilai/vim-monit'
Plugin 'ervandew/supertab'
" Plugin 'jpalardy/vim-slime'
Plugin 'Matt-Deacalion/vim-systemd-syntax'
Plugin 'editorconfig/editorconfig-vim'
" Plugin 'fatih/vim-go'
" Plugin 'jimenezrick/vimerl'
" Plugin 'wting/rust.vim'
" Plugin 'cespare/vim-toml'
" Plugin 'facebook/vim-flow'

" Plugin 'eagletmt/ghcmod-vim'
" Plugin 'raichoo/haskell-vim'

Plugin 'elzr/vim-json'
" Plugin 'vim-scripts/JavaScript-Indent'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'moll/vim-node'
Plugin 'mattn/emmet-vim'

" Plugin 'xolox/vim-misc'
" Plugin 'xolox/vim-easytags'

Plugin 'Valloric/MatchTagAlways'

Plugin 'plasticboy/vim-markdown'
" Plugin 'greyblake/vim-preview'

" Plugin 'tpope/vim-haml'
" Plugin 'tpope/vim-git'

Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-bundler'
Plugin 'thoughtbot/vim-rspec'
Plugin 'gabebw/vim-spec-runner'
Plugin 'tpope/vim-endwise'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'scrooloose/syntastic'

" Plugin 'Shougo/neocomplete.vim'
" Plugin 'Shougo/neosnippet'
" Plugin 'Shougo/neosnippet-snippets'
" Plugin 'Shougo/vimshell.vim'

" Plugin 'chase/vim-ansible-yaml'

" Plugin 'guns/vim-clojure-static'
" Plugin 'tpope/vim-leiningen'
" Plugin 'tpope/vim-classpath'
" Plugin 'tpope/vim-fireplace'
" Plugin 'kien/rainbow_parentheses.vim'
" Plugin 'vim-scripts/paredit.vim'
" Plugin 'wlangstroth/vim-racket'

Plugin 'chrisbra/csv.vim'
" Plugin 'dotcloud/docker', {'rtp': 'contrib/syntax/vim'}
" Plugin 'nginx/nginx', {'rtp': 'contrib/vim'}

call vundle#end()
filetype plugin indent on

" # Basic settings
" set mouse=a
set cursorline
set hidden
set nowrap
"set modelines=0
" set clipboard=unnamed
"set synmaxcol=128
"set ttyscroll=10
"set encoding=utf-8
"set nowritebackup

nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

map <C-a> <esc>:w<cr>

" Tmux runner
let g:VtrUseVtrMaps = 1
let g:VtrGitCdUpOnOpen = 0
let g:VtrPercentage = 30

" nmap <leader>fs :VtrFlushCommand<cr>:VtrSendCommandToRunner<cr>
" nmap <C-f> :VtrSendLinesToRunner<cr>
" vmap <C-f> :VtrSendLinesToRunner<cr>

" nmap <leader>osr :VtrOpenRunner { 'orientation': 'h', 'percentage': 50 }<cr>
" nmap <leader>opr :VtrOpenRunner { 'orientation': 'h', 'percentage': 50, 'cmd': 'pry'  }<cr>

" nnoremap <leader>sd :VtrSendCtrlD<cr>
" nnoremap <leader>sq :VtrSendCommandToRunner q<cr>
" nnoremap <leader>sl :VtrSendCommandToRunner <cr>
" nnoremap <leader>scu :VtrSendCommandToRunner <cr>

" let g:vtr_filetype_runner_overrides = {
"   \ 'haskell': 'ghci {file}',
"   \ 'applescript': 'osascript {file}'
"   \ }

let g:spec_runner_dispatcher = "VtrSendCommand! be {command}"

map <leader>rt <Plug>RunFocusedSpec
" map <leader>lt <Plug>RunMostRecentSpec# Clipboard

" macos vs linux clipboard
if has("mac")
  set clipboard+=unnamed
else
  set clipboard=unnamedplus
endif

" # Number settings

" set relativenumber
set number
function! NumberToggle()
  if exists('+relativenumber')
    setl rnu!
  else
    setl nu!
  endif
endfunc
nnoremap <F12> :call NumberToggle()<cr>

" backup/persistance settings
set undodir=$HOME/.vim/tmp/undo//
set backupdir=$HOME/.vim/tmp/backup//
set directory=$HOME/.vim/tmp/swap//
set backupskip=/tmp/*,/private/tmp/*"
set backup
set writebackup
set noswapfile

"set nobackup
set hlsearch
set ignorecase
set smartcase
set tabstop=2
set shiftwidth=2
set expandtab
set wrap
set linebreak
let &showbreak = '↳ '
set breakindent
set breakindentopt=sbr
set list
" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:>·,eol:¬,trail:·
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59
" set background=dark
set t_Co=256
colorscheme jellybeans

" map <Leader>rt :call RunCurrentSpecFile()<CR>

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

let g:jsx_ext_required = 0

" let g:slime_target = "tmux"

let g:vim_json_syntax_conceal = 0

" let g:acp_enableAtStartup = 0
" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_smart_case = 1

" let g:neocomplete#sources#syntax#min_keyword_length = 3
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" if !exists('g:neocomplete#keyword_patterns')
"   let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns['default'] = '\h\w*'


" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" autocmd FileType ruby setlocal omnifunc=rubycomplete#CompleteTags

let g:buffergator_viewport_split_policy = "B"
let g:buffergator_sort_regime = "mru"

let g:vim_markdown_folding_disabled = 1


let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_haml_checkers = ['haml_lint']
let g:syntastic_ruby_checkers = ['rubocop', 'mri']
" let g:syntastic_erlang_checkers = ['syntaxerl']

" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)

nmap <F8> :TagbarToggle<CR>
nnoremap <F5> :UndotreeToggle<cr>
" export TERMINFO="$HOME/.terminfo"
" Map ctrl-movement keys to window switching
nnoremap <C-k> <C-w>K
nnoremap <C-j> <C-w>J
nnoremap <C-l> <C-w>L
nnoremap <C-h> <C-w>H

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" format the entire file
nnoremap <leader>fef :normal! gg=G``<CR>

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
" nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" nmap <silent> <leader><leader> :NERDTreeToggle<CR>
" let g:ctrlp_map = '<leader-leader>'
nnoremap <silent> <leader><leader> :CtrlP<CR>
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore = ['\.pyc$']

nmap <silent> // :nohlsearch<CR>
noremap ,hl :set hlsearch! hlsearch?<CR>

" Allows you to enter sudo pass and save the file
" " when you forgot to open your file with sudo
cmap w!! %!sudo tee > /dev/null %

" Allow to copy/paste between VIM instances
" "copy the current visual selection to ~/.vbuf
vmap <Leader>y :w! ~/.vbuf<CR>
" "copy the current line to the buffer file if no visual selection
nmap <Leader>y :.w! ~/.vbuf<CR>
" "paste the contents of the buffer file
nmap <Leader>p :r ~/.vbuf<CR>
nmap <Leader>r :NERDTreeFind<CR>
nnoremap <Leader>, :CtrlSF<Space>

" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e
au BufRead,BufNewFile {Vagrantfile,Gemfile,Capfile} set ft=ruby

au FileType ruby setl sw=2 sts=2 et
au FileType javascript setl sw=2 sts=2 et
au FileType yaml setl sw=2 sts=2 et
if executable('ag')
    " Note we extract the column as well as the file and line number
    set grepprg=ag\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c%m
endif
nmap <silent> <RIGHT> :cnext<CR>
nmap <silent> <LEFT> :cprev<CR>
map <C-J> :bn<cr>
map <C-K> :bp<cr>
map <Leader>x :bd<cr>
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1

" inoremap ( ()<Esc>i
" inoremap [ []<Esc>i
" inoremap { {<CR>}<Esc>O
" autocmd Syntax html,vim inoremap < <lt>><Esc>i| inoremap > <c-r>=ClosePair('>')<CR>
" inoremap ) <c-r>=ClosePair(')')<CR>
" inoremap ] <c-r>=ClosePair(']')<CR>
" inoremap } <c-r>=CloseBracket()<CR>
" inoremap " <c-r>=QuoteDelim('"')<CR>
" inoremap ' <c-r>=QuoteDelim("'")<CR>

" function! ClosePair(char)
"  if getline('.')[col('.') - 1] == a:char
"  return "\<Right>"
"  else
"  return a:char
"  endif
" endf

" function! CloseBracket()
"  if match(getline(line('.') + 1), '\s*}') < 0
"  return "\<CR>}"
"  else
"  return "\<Esc>j0f}a"
"  endif
" endf

" function! QuoteDelim(char)
"  let line = getline('.')
"  let col = col('.')
"  if line[col - 2] == "\\"
"  "Inserting a quoted quotation mark into the string
"  return a:char
"  elseif line[col - 1] == a:char
"  "Escaping out of the string
"  return "\<Right>"
"  else
"  "Starting a string
"  return a:char.a:char."\<Esc>i"
"  endif
" endf
map <F2> :mksession! ~/vim_session <cr> " Quick write session with F2
map <F3> :source ~/vim_session <cr>     " And load session with F3
set autoread
let g:ag_highlight=1
if executable("ag")
  let g:ackprg = "ag --nogroup --column"
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
nmap <C-Enter> o<Esc>k
nmap <C-S-Enter> O<Esc>j
" nmap <Space-y> "ay
" nmap <Space-p> "ap
set guifont=Monaco:h12

let g:easytags_async = 1
" autocmd FileType * set tags=./.tags;,~/.vim/.vimtags
set cpoptions+=d  " i had to add this, it wasn't on until now.
let g:easytags_file = '~/.vim/.vimtags'
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_dynamic_files = 2
let g:easytags_async = 1
" let g:easytags_auto_update = 0  " check the question below
" let g:easytags_auto_highlight = 0
let g:easytags_resolve_links = 1
let g:easytags_suppress_report = 1
map <Leader> <Plug>(easymotion-prefix)
let g:user_emmet_leader_key="<c-e>"
" let g:user_emmet_install_global = 0
" autocmd FileType html,eruby,css,scss,javascript.jsx EmmetInstall
" let g:user_emmet_expandabbr_key = '<tab>'
" imap <expr> <Leader> emmet#expandAbbrIntelligent("\<tab>")

" Emmet
" #####

" autocmd FileType html imap <tab> <plug>(emmet-expand-abbr)
" autocmd FileType eruby imap <tab> <plug>(emmet-expand-abbr)
" autocmd FileType css imap <tab> <plug>(emmet-expand-abbr)
" autocmd FileType scss imap <tab> <plug>(emmet-expand-abbr)
" autocmd FileType pcss,postcss imap <tab> <plug>(emmet-expand-abbr)
" autocmd FileType javascript.jsx imap <tab> <plug>(emmet-expand-abbr)

let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-j>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
map <leader><CR> :CtrlPBuffer<cr>
" let g:airline#extensions#tabline#enabled = 1
" let g:bufferline_echo = 0
" let g:airline#extensions#bufferline#enabled = 1
" let g:airline#extensions#bufferline#overwrite_variables = 1
" let g:bufferline_rotate = 1

" tmux will only forward escape sequences to the terminal if surrounded by a
" DCS sequence
" http://sourceforge.net/mailarchive/forum.php?thread_name=AANLkTinkbdoZ8eNR1X2UobLTeww1jFrvfJxTMfKSq-L%2B%40mail.gmail.com&forum_name=tmux-users

" change cursor in insert mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Make CtrlP use ag for listing the files. Way faster and no useless files.
" Without --hidden, it never finds .travis.yml since it starts with a dot
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor --ignore-dir=.git -g ""'
let g:ctrlp_use_caching = 0

" Allow opening mutlipe splits with same file via CtrlP
let g:ctrlp_switch_buffer = 0

let g:ctrlp_match_window_bottom = 0
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_mruf_default_order = 1
let g:ctrlp_max_height = 45
let g:ctrlp_max_files = 300
let g:ctrlp_max_depth = 99
let g:ctrlp_prompt_mappings = {
\ 'MarkToOpen()':         ['<c-z>', '<c-x>'],
\ 'PrtExit()':            ['<esc>', '<c-c>', '<c-g>', '<C-@>', '<c-space>'],
\ }

function! s:CtrlpTargetedMapping(mapping, directory)
  execute 'nnoremap <leader>'.a:mapping.' :CtrlP '.a:directory.'<cr>'
endfunction

command! -nargs=* MapTargetedCtrlp call <sid>CtrlpTargetedMapping(<f-args>)

let rails_ctrlp_mappings = {
      \   'gc': 'app/controllers',
      \   'gj': 'app/assets/javascripts',
      \   'gl': 'lib',
      \   'gm': 'app/models',
      \   'gs': 'spec',
      \   'gv': 'app/views',
      \   'gw': 'app/workers',
      \   'gy': 'app/assets/stylesheets',
      \ }

for [mapping, directory] in items(rails_ctrlp_mappings)
  execute 'MapTargetedCtrlp '.mapping.' '.directory
endfor

" nmap <LEADER>rf :CtrlP ~/.vim/rcfiles<cr>
" nmap <LEADER>rp :CtrlP ~/.vim/rcplugins<cr>
" nmap <LEADER>ed :CtrlP ~/code/dotfiles<cr>

" nnoremap <leader>cpt :CtrlPTag<cr>

" nnoremap <leader>cpr :CtrlP =system('git rev-parse --show-toplevel')<cr><bs><cr>

" vim:ft=vim
